"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.doSetup = void 0;
const clc = require("colorette");
const fs = require("fs");
const apiv2_1 = require("../../../apiv2");
const github_1 = require("./github");
const prompt_1 = require("../../../prompt");
const logger_1 = require("../../../logger");
const INDEX_TEMPLATE = fs.readFileSync(__dirname + "/../../../../templates/init/hosting/index.html", "utf8");
const MISSING_TEMPLATE = fs.readFileSync(__dirname + "/../../../../templates/init/hosting/404.html", "utf8");
const DEFAULT_IGNORES = ["firebase.json", "**/.*", "**/node_modules/**"];
async function doSetup(setup, config) {
    setup.hosting = {};
    logger_1.logger.info();
    logger_1.logger.info(`Your ${clc.bold("public")} directory is the folder (relative to your project directory) that`);
    logger_1.logger.info(`will contain Hosting assets to be uploaded with ${clc.bold("firebase deploy")}. If you`);
    logger_1.logger.info("have a build process for your assets, use your build's output directory.");
    logger_1.logger.info();
    await (0, prompt_1.prompt)(setup.hosting, [
        {
            name: "public",
            type: "input",
            default: "public",
            message: "What do you want to use as your public directory?",
        },
        {
            name: "spa",
            type: "confirm",
            default: false,
            message: "Configure as a single-page app (rewrite all urls to /index.html)?",
        },
        {
            name: "github",
            type: "confirm",
            default: false,
            message: "Set up automatic builds and deploys with GitHub?",
        },
    ]);
    setup.config.hosting = {
        public: setup.hosting.public,
        ignore: DEFAULT_IGNORES,
    };
    if (setup.hosting.spa) {
        setup.config.hosting.rewrites = [{ source: "**", destination: "/index.html" }];
    }
    else {
        await config.askWriteProjectFile(`${setup.hosting.public}/404.html`, MISSING_TEMPLATE);
    }
    const c = new apiv2_1.Client({ urlPrefix: "https://www.gstatic.com", auth: false });
    const response = await c.get("/firebasejs/releases.json");
    await config.askWriteProjectFile(`${setup.hosting.public}/index.html`, INDEX_TEMPLATE.replace(/{{VERSION}}/g, response.body.current.version));
    if (setup.hosting.github) {
        return (0, github_1.initGitHub)(setup);
    }
}
exports.doSetup = doSetup;
