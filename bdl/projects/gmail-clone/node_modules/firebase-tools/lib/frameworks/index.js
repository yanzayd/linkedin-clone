"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepareFrameworks = exports.shortSiteName = void 0;
const path_1 = require("path");
const process_1 = require("process");
const projectUtils_1 = require("../projectUtils");
const normalizedHostingConfigs_1 = require("../hosting/normalizedHostingConfigs");
const api_1 = require("../hosting/api");
const apps_1 = require("../management/apps");
const fs_1 = require("fs");
const prompt_1 = require("../prompt");
const { writeFile } = fs_1.promises;
const shortSiteName = (site) => (site === null || site === void 0 ? void 0 : site.name) && site.name.split("/").pop();
exports.shortSiteName = shortSiteName;
const prepareFrameworks = async (targetNames, context, options) => {
    const project = (0, projectUtils_1.needProjectId)(context);
    const configs = (0, normalizedHostingConfigs_1.normalizedHostingConfigs)(Object.assign({ site: project }, options), { resolveTargets: true });
    options.normalizedHostingConfigs = configs;
    if (configs.length === 0)
        return;
    for (const config of configs) {
        const { source, site, public: publicDir } = config;
        if (!source)
            continue;
        const dist = (0, path_1.join)(".firebase", site);
        const hostingDist = (0, path_1.join)(dist, "hosting");
        const functionsDist = (0, path_1.join)(dist, "functions");
        if (publicDir)
            throw new Error(`hosting.public and hosting.source cannot both be set in firebase.json`);
        const getProjectPath = (...args) => (0, path_1.join)(process.cwd(), source, ...args);
        const functionName = `ssr${site.replace(/-/g, "")}`;
        const { build } = require("firebase-frameworks/tools");
        const { usingCloudFunctions, rewrites, redirects, headers, usesFirebaseConfig } = await build({
            dist,
            project,
            site,
            function: {
                name: functionName,
                region: "us-central1",
            },
        }, getProjectPath);
        config.public = hostingDist;
        if (usingCloudFunctions) {
            if (context.hostingChannel) {
                const message = "Cannot preview changes to the backend, you will only see changes to the static content on this channel.";
                if (!options.nonInteractive) {
                    const continueDeploy = await (0, prompt_1.promptOnce)({
                        type: "confirm",
                        default: true,
                        message: `${message} Would you like to continue with the deploy?`,
                    });
                    if (!continueDeploy)
                        (0, process_1.exit)(1);
                }
                else {
                    console.error(message);
                }
            }
            else {
                const functionConfig = {
                    source: functionsDist,
                    codebase: `firebase-frameworks-${site}`,
                };
                if (targetNames.includes("functions")) {
                    const combinedFunctionsConfig = [functionConfig].concat(options.config.get("functions") || []);
                    options.config.set("functions", combinedFunctionsConfig);
                }
                else {
                    targetNames.unshift("functions");
                    options.config.set("functions", functionConfig);
                }
            }
            config.rewrites = [
                ...(config.rewrites || []),
                ...rewrites,
                {
                    source: "**",
                    function: functionName,
                },
            ];
            let firebaseProjectConfig = null;
            if (usesFirebaseConfig) {
                const sites = await (0, api_1.listSites)(project);
                const selectedSite = sites.find((it) => (0, exports.shortSiteName)(it) === site);
                if (selectedSite) {
                    const { appId } = selectedSite;
                    if (appId) {
                        firebaseProjectConfig = await (0, apps_1.getAppConfig)(appId, apps_1.AppPlatform.WEB);
                    }
                    else {
                        console.warn(`No Firebase app associated with site ${site}, unable to provide authenticated server context.
You can link a Web app to a Hosting site here https://console.firebase.google.com/project/_/settings/general/web`);
                        if (!options.nonInteractive) {
                            const continueDeploy = await (0, prompt_1.promptOnce)({
                                type: "confirm",
                                default: true,
                                message: "Would you like to continue with the deploy?",
                            });
                            if (!continueDeploy)
                                (0, process_1.exit)(1);
                        }
                    }
                }
            }
            writeFile((0, path_1.join)(functionsDist, ".env"), `FRAMEWORKS_FIREBASE_PROJECT_CONFIG="${JSON.stringify(firebaseProjectConfig).replace(/"/g, '\\"')}"`);
        }
        else {
            config.rewrites = [
                ...(config.rewrites || []),
                ...rewrites,
                {
                    source: "**",
                    destination: "/index.html",
                },
            ];
        }
        config.redirects = [...(config.redirects || []), ...redirects];
        config.headers = [...(config.headers || []), ...headers];
    }
};
exports.prepareFrameworks = prepareFrameworks;
