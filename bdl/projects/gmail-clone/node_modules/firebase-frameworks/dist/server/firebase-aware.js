"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ssr = void 0;
const https_1 = require("firebase-functions/v2/https");
const app_1 = require("firebase-admin/app");
const auth_1 = require("firebase-admin/auth");
const app_2 = require("firebase/app");
const auth_2 = require("firebase/auth");
const cookie_1 = __importDefault(require("cookie"));
const lru_cache_1 = __importDefault(require("lru-cache"));
const constants_1 = require("../constants");
const { FRAMEWORK, HTTPS_OPTIONS } = require(`${process.cwd()}/settings`);
const { handle: frameworkHandle } = require(`../frameworks/${FRAMEWORK}/server`);
const FIREBASE_PROJECT_CONFIG = process.env.FRAMEWORKS_FIREBASE_PROJECT_CONFIG && JSON.parse(process.env.FRAMEWORKS_FIREBASE_PROJECT_CONFIG);
const adminApp = (0, app_1.initializeApp)();
const adminAuth = (0, auth_1.getAuth)(adminApp);
const firebaseAppsLRU = new lru_cache_1.default({
    max: constants_1.LRU_MAX_INSTANCES,
    ttl: constants_1.LRU_TTL,
    allowStale: true,
    updateAgeOnGet: true,
    dispose: (value) => {
        (0, app_2.deleteApp)(value);
    }
});
const mintCookie = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b;
    const idToken = (_b = (_a = req.header('Authorization')) === null || _a === void 0 ? void 0 : _a.split('Bearer ')) === null || _b === void 0 ? void 0 : _b[1];
    const verifiedIdToken = idToken ? yield adminAuth.verifyIdToken(idToken) : null;
    if (verifiedIdToken) {
        if (new Date().getTime() / 1000 - verifiedIdToken.auth_time > constants_1.ID_TOKEN_MAX_AGE) {
            res.status(301).end();
        }
        else {
            const cookie = yield adminAuth.createSessionCookie(idToken, { expiresIn: constants_1.COOKIE_MAX_AGE }).catch(e => {
                console.error(e.message);
            });
            if (cookie) {
                const options = { maxAge: constants_1.COOKIE_MAX_AGE, httpOnly: true, secure: true };
                res.cookie('__session', cookie, options).status(201).end();
            }
            else {
                res.status(401).end();
            }
        }
    }
    else {
        res.status(204).clearCookie('__session').end();
    }
});
const handleAuth = (req) => __awaiter(void 0, void 0, void 0, function* () {
    var _c;
    if (!FIREBASE_PROJECT_CONFIG)
        return;
    const cookies = cookie_1.default.parse(req.headers.cookie || '');
    const { __session } = cookies;
    if (!__session)
        return;
    const decodedIdToken = yield adminAuth.verifySessionCookie(__session).catch(e => console.error(e.message));
    if (!decodedIdToken)
        return;
    const { uid } = decodedIdToken;
    let app = firebaseAppsLRU.get(uid);
    if (!app) {
        const isRevoked = !(yield adminAuth.verifySessionCookie(__session, true).catch(e => console.error(e.message)));
        if (isRevoked)
            return;
        const random = Math.random().toString(36).split('.')[1];
        const appName = `authenticated-context:${uid}:${random}`;
        app = (0, app_2.initializeApp)(FIREBASE_PROJECT_CONFIG, appName);
        firebaseAppsLRU.set(uid, app);
    }
    const auth = (0, auth_2.getAuth)(app);
    if (((_c = auth.currentUser) === null || _c === void 0 ? void 0 : _c.uid) !== uid) {
        // TODO(jamesdaniels) get custom claims
        const customToken = yield adminAuth.createCustomToken(uid).catch(e => console.error(e.message));
        if (!customToken)
            return;
        yield (0, auth_2.signInWithCustomToken)(auth, customToken);
    }
    req.firebaseApp = app;
    req.currentUser = auth.currentUser;
});
exports.ssr = (0, https_1.onRequest)(HTTPS_OPTIONS, (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    if (req.url === '/__session') {
        yield mintCookie(req, res);
    }
    else {
        yield handleAuth(req);
        frameworkHandle(req, res);
    }
}));
