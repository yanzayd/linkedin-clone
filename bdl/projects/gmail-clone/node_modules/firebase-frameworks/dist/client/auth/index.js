"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.initializeClient = void 0;
const auth_1 = require("firebase/auth");
const constants_1 = require("../../constants");
let alreadySetup = false;
let lastPostedIdToken = null;
const mintCookie = (user) => __awaiter(void 0, void 0, void 0, function* () {
    const idTokenResult = user && (yield user.getIdTokenResult());
    const idTokenAge = idTokenResult && (new Date().getTime() - Date.parse(idTokenResult.issuedAtTime)) / 1000;
    if (idTokenAge && idTokenAge > constants_1.ID_TOKEN_MAX_AGE)
        return;
    // Specifically trip null => undefined when logged out, to delete any existing cookie
    const idToken = idTokenResult === null || idTokenResult === void 0 ? void 0 : idTokenResult.token;
    if (lastPostedIdToken === idToken)
        return;
    lastPostedIdToken = idToken;
    yield fetch('/__session', {
        method: idToken ? 'POST' : 'DELETE',
        headers: idToken ? {
            'Authorization': `Bearer ${idToken}`,
        } : {}
    });
});
const initializeClient = (auth) => {
    if (auth.app.name !== '[DEFAULT]')
        return;
    if (typeof window === 'undefined')
        return;
    if (alreadySetup)
        return;
    alreadySetup = true;
    (0, auth_1.beforeAuthStateChanged)(auth, mintCookie, () => {
        mintCookie(auth.currentUser);
    });
    (0, auth_1.onIdTokenChanged)(auth, user => mintCookie(user));
};
exports.initializeClient = initializeClient;
