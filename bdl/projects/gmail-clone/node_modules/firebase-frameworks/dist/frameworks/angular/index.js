"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.build = void 0;
const node_1 = require(`${process.cwd()}/node_modules/@angular-devkit/core/node`);
const core_1 = require(`${process.cwd()}/node_modules/@angular-devkit/core`);
const node_2 = require(`${process.cwd()}/node_modules/@angular-devkit/architect/node`);
const architect_1 = require(`${process.cwd()}/node_modules/@angular-devkit/architect`);
const promises_1 = require("fs/promises");
const path_1 = require("path");
const fs_extra_1 = require("fs-extra");
const jsonc_parser_1 = require("jsonc-parser");
const utils_1 = require("../../utils");
const build = (config, getProjectPath) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    // TODO log to firebase-tools
    const logger = new core_1.logging.Logger('firebase-tools');
    logger.subscribe(it => console.log(it.message));
    const host = core_1.workspaces.createWorkspaceHost(new node_1.NodeJsAsyncHost());
    const { workspace } = yield core_1.workspaces.readWorkspace(getProjectPath(), host);
    const architectHost = new node_2.WorkspaceNodeModulesArchitectHost(workspace, getProjectPath());
    const architect = new architect_1.Architect(architectHost);
    let project = globalThis.NG_DEPLOY_PROJECT;
    let browserTarget;
    let serverTarget;
    ;
    let prerenderTarget;
    if (!project) {
        const angularJson = (0, jsonc_parser_1.parse)(yield host.readFile('angular.json'));
        project = angularJson.defaultProject;
        if (!project)
            throw `angular.json missing defaultProject`;
    }
    // TODO if there are multiple projects warn
    const workspaceProject = workspace.projects.get(project);
    if (!workspaceProject)
        throw `No project ${project} found.`;
    const deployTargetDefinition = workspaceProject.targets.get('deploy');
    if ((deployTargetDefinition === null || deployTargetDefinition === void 0 ? void 0 : deployTargetDefinition.builder) === '@angular/fire:deploy') {
        const options = deployTargetDefinition.options;
        if (typeof (options === null || options === void 0 ? void 0 : options.prerenderTarget) === 'string')
            prerenderTarget = (0, architect_1.targetFromTargetString)(options.prerenderTarget);
        if (typeof (options === null || options === void 0 ? void 0 : options.browserTarget) === 'string')
            browserTarget = (0, architect_1.targetFromTargetString)(options.browserTarget);
        if (typeof (options === null || options === void 0 ? void 0 : options.serverTarget) === 'string')
            serverTarget = (0, architect_1.targetFromTargetString)(options.serverTarget);
        if (prerenderTarget) {
            const prerenderOptions = yield architectHost.getOptionsForTarget(prerenderTarget);
            if (browserTarget) {
                if ((0, architect_1.targetStringFromTarget)(browserTarget) !== (prerenderOptions === null || prerenderOptions === void 0 ? void 0 : prerenderOptions.browserTarget))
                    throw 'foo';
            }
            else {
                if (typeof (prerenderOptions === null || prerenderOptions === void 0 ? void 0 : prerenderOptions.browserTarget) !== 'string')
                    throw 'foo';
                browserTarget = (0, architect_1.targetFromTargetString)(prerenderOptions.browserTarget);
            }
            if (serverTarget && (0, architect_1.targetStringFromTarget)(serverTarget) !== (prerenderOptions === null || prerenderOptions === void 0 ? void 0 : prerenderOptions.serverTarget))
                throw 'foo';
        }
    }
    else if (workspaceProject.targets.has('prerender')) {
        // TODO test and warn if production doesn't exist, fallback to default
        prerenderTarget = { project, target: 'prerender', configuration: 'production' };
        const production = yield architectHost.getOptionsForTarget(prerenderTarget);
        if (typeof (production === null || production === void 0 ? void 0 : production.browserTarget) !== 'string')
            throw 'foo';
        browserTarget = (0, architect_1.targetFromTargetString)(production.browserTarget);
        if (typeof (production === null || production === void 0 ? void 0 : production.serverTarget) !== 'string')
            throw 'foo';
        serverTarget = (0, architect_1.targetFromTargetString)(production.serverTarget);
    }
    else {
        // TODO test and warn if production doesn't exist, fallback to default
        const configuration = 'production';
        if (workspaceProject.targets.has('build'))
            browserTarget = { project, target: 'build', configuration };
        if (workspaceProject.targets.has('server'))
            serverTarget = { project, target: 'server', configuration };
    }
    const scheduleTarget = (target) => __awaiter(void 0, void 0, void 0, function* () {
        const run = yield architect.scheduleTarget(target, undefined, { logger });
        const { success, error } = yield run.output.toPromise();
        if (!success)
            throw new Error(error);
    });
    if (!browserTarget)
        throw 'No build target...';
    if (prerenderTarget) {
        // TODO fix once we can migrate to ESM. Spawn for now.
        // ERR require() of ES Module .../node_modules/@nguniversal/express-engine/fesm2015/express-engine.mjs not supported.
        //     Instead change the require of .../node_modules/@nguniversal/express-engine/fesm2015/express-engine.mjs to a dynamic
        //     import() which is available in all CommonJS modules.
        // await scheduleTarget(prerenderTarget);
        yield (0, utils_1.spawn)('node_modules/.bin/ng', ['run', (0, architect_1.targetStringFromTarget)(prerenderTarget)], { cwd: process.cwd() }, 
        // TODO log to firebase-tools
        out => console.log(out.toString()), err => console.error(err.toString()));
    }
    else {
        yield scheduleTarget(browserTarget);
        if (serverTarget)
            yield scheduleTarget(serverTarget);
    }
    const deployPath = (...args) => (0, path_1.join)(config.dist, ...args);
    const getHostingPath = (...args) => deployPath('hosting', ...args);
    const browserTargetOptions = yield architectHost.getOptionsForTarget(browserTarget);
    if (typeof (browserTargetOptions === null || browserTargetOptions === void 0 ? void 0 : browserTargetOptions.outputPath) !== 'string')
        throw 'foo';
    const browserOutputPath = browserTargetOptions.outputPath;
    yield (0, promises_1.mkdir)(getHostingPath(), { recursive: true });
    yield (0, fs_extra_1.copy)(getProjectPath(browserOutputPath), getHostingPath());
    const usingCloudFunctions = !!serverTarget;
    let bootstrapScript = '';
    const packageJson = JSON.parse(yield host.readFile('package.json'));
    if (serverTarget) {
        const serverTargetOptions = yield architectHost.getOptionsForTarget(serverTarget);
        if (typeof (serverTargetOptions === null || serverTargetOptions === void 0 ? void 0 : serverTargetOptions.outputPath) !== 'string')
            throw 'foo';
        const serverOutputPath = serverTargetOptions.outputPath;
        yield (0, promises_1.mkdir)(deployPath('functions', serverOutputPath), { recursive: true });
        yield (0, promises_1.mkdir)(deployPath('functions', browserOutputPath), { recursive: true });
        yield (0, fs_extra_1.copy)(getProjectPath(serverOutputPath), deployPath('functions', serverOutputPath));
        yield (0, fs_extra_1.copy)(getProjectPath(browserOutputPath), deployPath('functions', browserOutputPath));
        bootstrapScript = `exports.handle = require('./${serverOutputPath}/main.js').app();\n`;
        const bundleDependencies = (_a = serverTargetOptions.bundleDependencies) !== null && _a !== void 0 ? _a : true;
        if (bundleDependencies) {
            const dependencies = {};
            const externalDependencies = serverTargetOptions.externalDependencies || [];
            externalDependencies.forEach(externalDependency => {
                var _a;
                const packageVersion = (_a = (0, utils_1.findDependency)(externalDependency)) === null || _a === void 0 ? void 0 : _a.version;
                if (packageVersion) {
                    dependencies[externalDependency] = packageVersion;
                }
            });
            packageJson.dependencies = dependencies;
        }
    }
    // TODO add immutable header on static assets
    return { usingCloudFunctions, rewrites: [], redirects: [], headers: [], framework: 'express', packageJson, bootstrapScript };
});
exports.build = build;
