"use strict";
// Copyright 2022 Google LLC
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.build = void 0;
const promises_1 = require("fs/promises");
const path_1 = require("path");
const build_1 = __importDefault(require(`${process.cwd()}/node_modules/next/dist/build`));
const export_1 = __importDefault(require(`${process.cwd()}/node_modules/next/dist/export`));
const fs_extra_1 = require("fs-extra");
const trace_1 = require(`${process.cwd()}/node_modules/next/dist/trace`);
const build = (config, getProjectPath) => __awaiter(void 0, void 0, void 0, function* () {
    let nextConfig;
    try {
        const { default: loadConfig } = require(getProjectPath('node_modules', 'next', 'dist', 'server', 'config'));
        const { PHASE_PRODUCTION_BUILD } = require(getProjectPath('node_modules', 'next', 'constants'));
        nextConfig = yield loadConfig(PHASE_PRODUCTION_BUILD, getProjectPath(), null);
    }
    catch (e) {
        // Must be Next 11, just import it
        nextConfig = yield Promise.resolve().then(() => __importStar(require(getProjectPath('next.config.js'))));
    }
    // SEMVER these defaults are only needed for Next 11
    const { distDir = '.next', basePath = '' } = nextConfig;
    const deployPath = (...args) => config.dist ? (0, path_1.join)(config.dist, ...args) : getProjectPath('.deploy', ...args);
    const getHostingPath = (...args) => deployPath('hosting', ...basePath.split('/'), ...args);
    yield (0, build_1.default)(getProjectPath(), null, false, false, true);
    console.log('Attempting `next export`...');
    yield (0, export_1.default)(getProjectPath(), { silent: true, outdir: getHostingPath() }, (0, trace_1.trace)('next-export-cli')).catch(() => {
        console.warn('\nYou can safely ignore the above error. Since next export did not succeed we\'ll treat as SSR.\n\n');
    });
    let usingCloudFunctions = !!config.function;
    const asyncSteps = [];
    const exportDetailJson = yield (0, promises_1.readFile)(getProjectPath(distDir, 'export-detail.json')).then(it => JSON.parse(it.toString()), () => { success: false; });
    if (exportDetailJson.success) {
        usingCloudFunctions = false;
    }
    else {
        yield (0, promises_1.mkdir)(getHostingPath('_next', 'static'), { recursive: true });
        yield (0, fs_extra_1.copy)(getProjectPath('public'), getHostingPath());
        yield (0, fs_extra_1.copy)(getProjectPath(distDir, 'static'), getHostingPath('_next', 'static'));
        const serverPagesDir = getProjectPath(distDir, 'server', 'pages');
        yield (0, fs_extra_1.copy)(serverPagesDir, getHostingPath(), { filter: (filename) => __awaiter(void 0, void 0, void 0, function* () {
                const status = yield (0, promises_1.stat)(filename);
                if (status.isDirectory())
                    return true;
                return (0, path_1.extname)(filename) === '.html';
            }) });
        const prerenderManifestBuffer = yield (0, promises_1.readFile)(getProjectPath(distDir, 'prerender-manifest.json'));
        const prerenderManifest = JSON.parse(prerenderManifestBuffer.toString());
        // TODO drop from hosting if revalidate
        Object.keys(prerenderManifest.routes).forEach(route => {
            // / => index.json => index.html => index.html
            // /foo => foo.json => foo.html
            const parts = route.split('/').slice(1).filter(it => !!it);
            const partsOrIndex = parts.length > 0 ? parts : ['index'];
            const dataPath = `${(0, path_1.join)(...partsOrIndex)}.json`;
            const htmlPath = `${(0, path_1.join)(...partsOrIndex)}.html`;
            const moveHTML = (0, promises_1.mkdir)(getHostingPath((0, path_1.dirname)(htmlPath)), { recursive: true }).then(() => {
                return (0, promises_1.copyFile)(getProjectPath(distDir, 'server', 'pages', htmlPath), getHostingPath(htmlPath));
            });
            const dataRoute = prerenderManifest.routes[route].dataRoute;
            const moveData = (0, promises_1.mkdir)(getHostingPath((0, path_1.dirname)(dataRoute)), { recursive: true }).then(() => {
                return (0, promises_1.copyFile)(getProjectPath(distDir, 'server', 'pages', dataPath), getHostingPath(dataRoute));
            });
            // TODO initialRevalidateSeconds should be used in Cloud Fuctions as a c-max-age
            asyncSteps.push(moveHTML);
            asyncSteps.push(moveData);
        });
    }
    if (usingCloudFunctions) {
        yield (0, promises_1.mkdir)(deployPath('functions'), { recursive: true });
        asyncSteps.push((0, promises_1.copyFile)(getProjectPath('next.config.js'), deployPath('functions', 'next.config.js')), (0, fs_extra_1.copy)(getProjectPath('public'), deployPath('functions', 'public')), (0, fs_extra_1.copy)(getProjectPath(distDir), deployPath('functions', distDir)));
    }
    const packageJsonBuffer = yield (0, promises_1.readFile)(getProjectPath('package.json'));
    const packageJson = JSON.parse(packageJsonBuffer.toString());
    yield Promise.all(asyncSteps);
    const manifestBuffer = yield (0, promises_1.readFile)(getProjectPath(distDir, 'routes-manifest.json'));
    const manifest = JSON.parse(manifestBuffer.toString());
    const { headers: nextJsHeaders = [], redirects: nextJsRedirects = [], rewrites: nextJsRewrites = [], } = manifest;
    const headers = nextJsHeaders.map(({ source, headers }) => ({ source, headers }));
    const redirects = nextJsRedirects
        .filter(({ internal }) => !internal)
        .map(({ source, destination, statusCode: type }) => ({ source, destination, type }));
    const nextJsRewritesToUse = Array.isArray(nextJsRewrites) ? nextJsRewrites : nextJsRewrites.beforeFiles || [];
    const rewrites = nextJsRewritesToUse.map(({ source, destination, locale, has }) => {
        // Can we change i18n into Firebase settings?
        if (has)
            return undefined;
        return { source, destination };
    }).filter(it => it);
    // TODO use this better detection for usesFirebaseConfig
    return { usingCloudFunctions, headers, redirects, rewrites, framework: 'next.js', packageJson, bootstrapScript: null };
});
exports.build = build;
