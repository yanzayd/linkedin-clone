"use strict";
// Copyright 2022 Google LLC
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.build = void 0;
const promises_1 = require("fs/promises");
const path_1 = require("path");
const fs_extra_1 = require("fs-extra");
const nuxt3_1 = require("../nuxt3");
const build = (config, getProjectPath) => __awaiter(void 0, void 0, void 0, function* () {
    let nuxt;
    try {
        nuxt = require(`${process.cwd()}/node_modules/nuxt`);
    }
    catch (e) {
        return yield (0, nuxt3_1.build)(config, getProjectPath);
    }
    const nuxtApp = yield nuxt.loadNuxt({
        for: 'build',
        rootDir: getProjectPath(),
    });
    const deployPath = (...args) => (0, path_1.join)(config.dist, ...args);
    const { options: { target, app: { basePath, assetsPath }, buildDir, dir: { static: staticDir } } } = yield nuxt.build(nuxtApp);
    yield (0, promises_1.mkdir)(deployPath('hosting', basePath, assetsPath), { recursive: true });
    let usingCloudFunctions = false;
    if (target === 'static') {
        const nuxtApp = yield nuxt.loadNuxt({
            for: 'start',
            rootDir: getProjectPath(),
        });
        yield nuxtApp.server.listen(0);
        const { getBuilder } = require(getProjectPath('node_modules', '@nuxt', 'builder'));
        const { Generator } = require(getProjectPath('node_modules', '@nuxt', 'generator'));
        const builder = yield getBuilder(nuxtApp);
        const generator = new Generator(nuxtApp, builder);
        yield generator.generate({ build: false, init: true });
        yield (0, fs_extra_1.copy)(generator.distPath, deployPath('hosting'));
        yield nuxtApp.server.close();
        usingCloudFunctions = !generator.isFullStatic;
    }
    else {
        yield (0, fs_extra_1.copy)((0, path_1.join)(buildDir, 'dist', 'client'), deployPath('hosting', assetsPath));
        yield (0, fs_extra_1.copy)(getProjectPath(staticDir), deployPath('hosting'));
    }
    if (usingCloudFunctions) {
        yield (0, promises_1.mkdir)(deployPath('functions'), { recursive: true });
        yield (0, fs_extra_1.copy)(buildDir, deployPath('functions'));
    }
    const packageJsonBuffer = yield (0, promises_1.readFile)(getProjectPath('package.json'));
    const packageJson = JSON.parse(packageJsonBuffer.toString());
    return { usingCloudFunctions, rewrites: [], redirects: [], headers: [], packageJson, framework: 'nuxt', bootstrapScript: null };
});
exports.build = build;
