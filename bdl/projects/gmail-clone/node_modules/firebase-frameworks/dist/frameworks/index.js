"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.build = void 0;
const child_process_1 = require("child_process");
const fs_1 = require("fs");
const promises_1 = require("fs/promises");
const path_1 = require("path");
const constants_1 = require("../constants");
const utils_1 = require("../utils");
const NODE_VERSION = parseInt(process.versions.node, 10).toString();
const dynamicImport = (getProjectPath) => {
    const exists = (...files) => files.some(file => (0, fs_1.existsSync)(getProjectPath(file)));
    if (exists('next.config.js'))
        return Promise.resolve().then(() => __importStar(require('./next.js/index.js')));
    if (exists('nuxt.config.js', 'nuxt.config.ts'))
        return Promise.resolve().then(() => __importStar(require('./nuxt/index.js')));
    if (exists('angular.json'))
        return Promise.resolve().then(() => __importStar(require('./angular/index.js')));
    return Promise.resolve().then(() => __importStar(require('./express/index.js')));
};
const build = (config, getProjectPath) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b, _c, _d, _e;
    const command = yield dynamicImport(getProjectPath);
    yield (0, promises_1.rm)(config.dist, { recursive: true, force: true });
    const results = yield command.build(config, getProjectPath);
    const { usingCloudFunctions, packageJson, framework, bootstrapScript, rewrites, redirects, headers } = results;
    let usesFirebaseConfig = false;
    if (usingCloudFunctions) {
        const firebaseAuthDependency = (0, utils_1.findDependency)('@firebase/auth', getProjectPath());
        usesFirebaseConfig = !!firebaseAuthDependency;
        packageJson.main = 'server.js';
        delete packageJson.devDependencies;
        packageJson.dependencies || (packageJson.dependencies = {});
        packageJson.dependencies['firebase-frameworks'] = constants_1.FIREBASE_FRAMEWORKS_VERSION;
        const functionsDist = (0, path_1.join)(config.dist, 'functions');
        for (const [name, version] of Object.entries(packageJson.dependencies)) {
            if (version.startsWith('file:')) {
                const path = version.split(':')[1];
                if (yield (0, promises_1.access)(path).catch(() => true))
                    continue;
                const stats = yield (0, promises_1.stat)(path);
                if (stats.isDirectory()) {
                    const result = (0, child_process_1.spawnSync)('npm', ['pack', (0, path_1.relative)(functionsDist, path)], { cwd: functionsDist });
                    if (!result.stdout)
                        continue;
                    const filename = result.stdout.toString().trim();
                    packageJson.dependencies[name] = `file:${filename}`;
                }
                else {
                    const filename = (0, path_1.basename)(path);
                    yield (0, promises_1.copyFile)(path, (0, path_1.join)(functionsDist, filename));
                    packageJson.dependencies[name] = `file:${filename}`;
                }
            }
        }
        // TODO(jamesdaniels) test these with semver, error if already set out of range
        (_a = packageJson.dependencies)['firebase-admin'] || (_a['firebase-admin'] = constants_1.FIREBASE_ADMIN_VERSION);
        (_b = packageJson.dependencies)['firebase-functions'] || (_b['firebase-functions'] = constants_1.FIREBASE_FUNCTIONS_VERSION);
        if (usesFirebaseConfig) {
            (_c = packageJson.dependencies)['cookie'] || (_c['cookie'] = constants_1.COOKIE_VERSION);
            (_d = packageJson.dependencies)['lru-cache'] || (_d['lru-cache'] = constants_1.LRU_CACHE_VERSION);
        }
        packageJson.engines || (packageJson.engines = {});
        (_e = packageJson.engines).node || (_e.node = NODE_VERSION);
        yield (0, promises_1.writeFile)((0, path_1.join)(functionsDist, 'package.json'), JSON.stringify(packageJson, null, 2));
        yield (0, promises_1.copyFile)(getProjectPath('package-lock.json'), (0, path_1.join)(functionsDist, 'package-lock.json')).catch(() => { });
        const npmInstall = (0, child_process_1.spawnSync)('npm', ['i', '--only', 'production', '--no-audit', '--silent'], { cwd: functionsDist });
        if (npmInstall.status) {
            console.error(npmInstall.output.toString());
        }
        // TODO(jamesdaniels) allow configuration of the Cloud Function
        yield (0, promises_1.writeFile)((0, path_1.join)(functionsDist, 'settings.js'), `exports.HTTPS_OPTIONS = {};
exports.FRAMEWORK = '${framework}';
`);
        if (bootstrapScript) {
            yield (0, promises_1.writeFile)((0, path_1.join)(functionsDist, 'bootstrap.js'), bootstrapScript);
        }
        if (usesFirebaseConfig) {
            yield (0, promises_1.writeFile)((0, path_1.join)(functionsDist, 'server.js'), "exports.ssr = require('firebase-frameworks/server/firebase-aware').ssr;\n");
        }
        else {
            yield (0, promises_1.writeFile)((0, path_1.join)(functionsDist, 'server.js'), "exports.ssr = require('firebase-frameworks/server').ssr;\n");
        }
        yield (0, promises_1.writeFile)((0, path_1.join)(functionsDist, 'functions.yaml'), JSON.stringify({
            endpoints: {
                [config.function.name]: {
                    platform: 'gcfv2',
                    region: [constants_1.DEFAULT_REGION],
                    labels: {},
                    httpsTrigger: {},
                    entryPoint: 'ssr'
                }
            },
            specVersion: 'v1alpha1',
            // TODO(jamesdaniels) add persistent disk if needed
            requiredAPIs: []
        }, null, 2));
    }
    return { usingCloudFunctions, rewrites, redirects, headers, usesFirebaseConfig };
});
exports.build = build;
