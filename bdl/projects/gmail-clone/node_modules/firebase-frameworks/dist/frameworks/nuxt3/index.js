"use strict";
// Copyright 2022 Google LLC
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.build = void 0;
const fs_1 = require("fs");
const promises_1 = require("fs/promises");
const path_1 = require("path");
const fs_extra_1 = require("fs-extra");
const build = (config, getProjectPath) => __awaiter(void 0, void 0, void 0, function* () {
    const { loadNuxt, buildNuxt } = yield import(`${process.cwd()}/node_modules/@nuxt/kit/dist/index.mjs`);
    const nuxtApp = yield loadNuxt({
        cwd: getProjectPath(),
        overrides: {
            nitro: { preset: 'node' },
            _generate: true,
        },
    });
    const { options: { app: { baseURL, buildAssetsDir } } } = nuxtApp;
    yield buildNuxt(nuxtApp);
    const distDir = '.output';
    const deployPath = (...args) => config.dist ? (0, path_1.join)(config.dist, ...args) : getProjectPath('.deploy', ...args);
    const getHostingPath = (...args) => deployPath('hosting', ...baseURL.split('/'), ...args);
    const usingCloudFunctions = !!config.function;
    yield (0, promises_1.mkdir)(deployPath('functions'), { recursive: true });
    yield (0, promises_1.mkdir)(getHostingPath(buildAssetsDir), { recursive: true });
    if (usingCloudFunctions) {
        yield (0, fs_extra_1.copy)(getProjectPath(distDir, 'server'), deployPath('functions'));
    }
    yield (0, fs_extra_1.copy)(getProjectPath(distDir, 'public'), deployPath('hosting'));
    const packageJsonBuffer = yield (0, promises_1.readFile)(getProjectPath('package.json'));
    const packageJson = JSON.parse(packageJsonBuffer.toString());
    const nodeModulesPath = getProjectPath('.output', 'server', 'node_modules');
    const directories = (0, fs_1.existsSync)(nodeModulesPath) ? yield (0, promises_1.readdir)(nodeModulesPath) : [];
    const staticDepsArray = yield Promise.all(directories.map((directory) => __awaiter(void 0, void 0, void 0, function* () {
        const packageJsonBuffer = yield (0, promises_1.readFile)((0, path_1.join)(nodeModulesPath, directory, 'package.json'));
        const packageJson = JSON.parse(packageJsonBuffer.toString());
        return [packageJson.name, packageJson.version];
    })));
    // TODO can we override existing deps?
    packageJson.dependencies = Object.fromEntries(staticDepsArray);
    return { usingCloudFunctions, rewrites: [], redirects: [], headers: [], packageJson, framework: 'nuxt3', bootstrapScript: null };
});
exports.build = build;
