"use strict";
// Copyright 2022 Google LLC
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.build = void 0;
const promises_1 = require("fs/promises");
const path_1 = require("path");
const fs_extra_1 = require("fs-extra");
const utils_1 = require("../../utils");
const build = (config, getProjectPath) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b;
    const packageJsonBuffer = yield (0, promises_1.readFile)(getProjectPath('package.json'));
    const packageJson = JSON.parse(packageJsonBuffer.toString());
    if ((_a = packageJson.scripts) === null || _a === void 0 ? void 0 : _a.build) {
        // TODO add to the firebaseTools logs
        yield (0, utils_1.spawn)('npm', ['run', 'build'], { cwd: getProjectPath() }, stdoutChunk => {
            console.log(stdoutChunk.toString());
        }, errChunk => {
            console.error(errChunk.toString());
        });
    }
    const findServerRenderMethod = (method = [], entry) => __awaiter(void 0, void 0, void 0, function* () {
        if (!config.function)
            return undefined;
        const allowRecursion = !entry;
        entry || (entry = yield (() => __awaiter(void 0, void 0, void 0, function* () {
            try {
                const requiredProject = require(getProjectPath());
                if (requiredProject)
                    method = ['require'];
                return requiredProject;
            }
            catch (e) {
                const importedProject = yield Promise.resolve().then(() => __importStar(require(getProjectPath()))).catch(() => undefined);
                if (importedProject)
                    method = ['import'];
                return importedProject;
            }
        }))());
        if (!entry)
            return undefined;
        const { default: defaultExport, app, handle } = entry;
        if (typeof handle === 'function')
            return [...method, 'handle'];
        if (typeof app === 'function') {
            try {
                const express = app();
                if (typeof express.render === 'function')
                    return [...method, 'app'];
            }
            catch (e) { }
        }
        if (!allowRecursion)
            return undefined;
        if (typeof defaultExport === 'object') {
            if (typeof defaultExport.then === 'function') {
                const awaitedDefaultExport = yield defaultExport;
                return findServerRenderMethod([...method, 'default'], awaitedDefaultExport);
            }
            else {
                return findServerRenderMethod([...method, 'default'], defaultExport);
            }
        }
        return undefined;
    });
    const serverRenderMethod = yield findServerRenderMethod();
    let bootstrapScript = '';
    if (serverRenderMethod) {
        let stack = serverRenderMethod.slice();
        const entry = packageJson.name;
        if (stack.shift() === 'require') {
            bootstrapScript += `const bootstrap = Promise.resolve(require('${entry}'))`;
        }
        else {
            bootstrapScript += `const bootstrap = import('${entry}')`;
        }
        if (stack[0] === 'default') {
            stack.shift();
            bootstrapScript += '.then(({ default }) => default)';
        }
        if (stack[0] === 'app') {
            stack.shift();
            bootstrapScript += '.then(({ app }) => app())';
        }
        bootstrapScript += ';\n';
        const method = stack.shift();
        bootstrapScript += `exports.handle = async (req, res) => (await bootstrap)${method ? `.${method}` : ''}(req, res);`;
    }
    const deployPath = (...args) => config.dist ? (0, path_1.join)(config.dist, ...args) : getProjectPath('.deploy', ...args);
    const getHostingPath = (...args) => deployPath('hosting', ...args);
    if (serverRenderMethod) {
        yield (0, promises_1.mkdir)(deployPath('functions'), { recursive: true });
    }
    yield (0, promises_1.mkdir)(getHostingPath(), { recursive: true });
    if ((_b = packageJson.directories) === null || _b === void 0 ? void 0 : _b.serve) {
        yield (0, fs_extra_1.copy)(getProjectPath(packageJson.directories.serve), deployPath('hosting'));
    }
    if (serverRenderMethod) {
        const npmPackResults = JSON.parse(yield (0, utils_1.exec)(`npm pack ${getProjectPath()} --json`, { cwd: deployPath('functions') }));
        const matchingPackResult = npmPackResults.find((it) => it.name === packageJson.name);
        const { filename } = matchingPackResult;
        packageJson.dependencies || (packageJson.dependencies = {});
        packageJson.dependencies[packageJson.name] = `file:${filename}`;
    }
    return { usingCloudFunctions: !!serverRenderMethod, framework: 'express', rewrites: [], redirects: [], headers: [], packageJson, bootstrapScript };
});
exports.build = build;
